-- Tabulky
create table if not exists public.categories (
  id bigint generated by default as identity primary key,
  name text not null,
  order_index int default 0,
  is_active boolean default true,
  created_at timestamp with time zone default now()
);

-- Profily uživatelů pro role
create table if not exists public.profiles (
  user_id uuid primary key references auth.users(id) on delete cascade,
  role text default 'user' check (role in ('user','admin')),
  created_at timestamp with time zone default now()
);

alter table public.profiles enable row level security;
drop policy if exists profiles_select_self on public.profiles;
create policy profiles_select_self on public.profiles
  for select to authenticated using (user_id = auth.uid());

create table if not exists public.products (
  id bigint generated by default as identity primary key,
  name text not null,
  unit text,
  description text,
  note text,
  category_id bigint references public.categories(id) on delete set null,
  image_url text,
  order_index int default 0,
  price_without_vat numeric(12,2) default 0,
  vat_rate int default 21,
  price_with_vat numeric(12,2),
  is_active boolean default true,
  created_at timestamp with time zone default now()
);

alter table public.categories enable row level security;
alter table public.products enable row level security;

-- Politiky: veřejné čtení aktivních položek
drop policy if exists categories_read_active on public.categories;
create policy categories_read_active on public.categories
  for select using (is_active = true);

drop policy if exists products_read_active on public.products;
create policy products_read_active on public.products
  for select using (is_active = true);

-- Politiky: insert/update/delete pouze pro autentizované uživatele (role authenticated)
drop policy if exists categories_write_admin on public.categories;
create policy categories_write_admin on public.categories
  for all to authenticated
  using (exists (select 1 from public.profiles p where p.user_id = auth.uid() and p.role = 'admin'))
  with check (exists (select 1 from public.profiles p where p.user_id = auth.uid() and p.role = 'admin'));

drop policy if exists products_write_admin on public.products;
create policy products_write_admin on public.products
  for all to authenticated
  using (exists (select 1 from public.profiles p where p.user_id = auth.uid() and p.role = 'admin'))
  with check (exists (select 1 from public.profiles p where p.user_id = auth.uid() and p.role = 'admin'));

-- Indexy pro výkon
create index if not exists idx_products_category on public.products(category_id);
create index if not exists idx_products_active on public.products(is_active);
create index if not exists idx_categories_active on public.categories(is_active);

-- View pomocná pro rychlé přidání admina (ručně v SQL editoru nastavte roli)
-- insert into public.profiles (user_id, role) values ('<UID_Z_AUTH.USERS>', 'admin')


